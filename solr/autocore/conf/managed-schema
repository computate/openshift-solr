<?xml version="1.0" encoding="UTF-8"?>
<schema name="example-basic" version="1.6">
    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>
    <fieldType name="strings" class="solr.StrField" sortMissingLast="true" multiValued="true"/>
    <!-- boolean type: "true" or "false" -->
    <fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>
    <fieldType name="booleans" class="solr.BoolField" sortMissingLast="true" multiValued="true"/>
    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are currently supported on types that are sorted internally as strings and on numeric types. This includes "string","boolean", "int", "float", "long", "date", "double", including the "Trie" and "Point" variants. - If sortMissingLast="true", then a sort on this field will cause documents without the field to come after documents with the field, regardless of the requested sort order (asc or desc). - If sortMissingFirst="true", then a sort on this field will cause documents without the field to come before documents with the field, regardless of the requested sort order. - If sortMissingLast="false" and sortMissingFirst="false" (the default), then default lucene sorting will be used which places docs without the field first in an ascending sort and last in a descending sort. -->
    <!-- Numeric field types that index values using KD-trees. *Point fields are faster and more efficient than Trie* fields both, at search time and at index time, but some features are still not supported. Point fields don't support FieldCache, so they must have docValues="true" if needed for sorting, faceting, functions, etc. -->
    <fieldType name="pint" class="solr.IntPointField"/>
    <fieldType name="pfloat" class="solr.FloatPointField"/>
    <fieldType name="plong" class="solr.LongPointField"/>
    <fieldType name="pdouble" class="solr.DoublePointField"/>
    <fieldType name="pints" class="solr.IntPointField" multiValued="true"/>
    <fieldType name="pfloats" class="solr.FloatPointField" multiValued="true"/>
    <fieldType name="plongs" class="solr.LongPointField" multiValued="true"/>
    <fieldType name="pdoubles" class="solr.DoublePointField" multiValued="true"/>
    <!-- Default numeric field types. For faster range queries, consider *PointFields (pint/pfloat/plong/pdouble), or the tint/tfloat/tlong/tdouble types. -->
    <fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="ints" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="floats" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="longs" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="doubles" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <!-- Numeric field types that index each value at various levels of precision to accelerate range queries when the number of values between the range endpoints is large. See the javadoc for NumericRangeQuery for internal implementation details. Smaller precisionStep values (specified in bits) will lead to more tokens indexed per value, slightly larger index size, and faster range queries. A precisionStep of 0 disables indexing at different precision levels. Consider using pint/pfloat/plong/pdouble instead of Trie* fields if possible -->
    <fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>
    <fieldType name="tints" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tfloats" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tlongs" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tdoubles" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0" multiValued="true"/>
    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and is a more restricted form of the canonical representation of dateTime http://www.w3.org/TR/xmlschema-2/#dateTime The trailing "Z" designates UTC time and is mandatory. Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z All other components are mandatory. Expressions can also be used to denote calculations that should be performed relative to "NOW" to determine the value, ie... NOW/HOUR ... Round to the start of the current hour NOW-1DAY ... Exactly 1 day prior to now NOW/DAY+6MONTHS+3DAYS ... 6 months and 3 days in the future from the start of the current day Consult the TrieDateField javadocs for more information. -->
    <!-- KD-tree versions of date fields -->
    <fieldType name="pdate" class="solr.DatePointField"/>
    <fieldType name="pdates" class="solr.DatePointField" multiValued="true"/>
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>
    <fieldType name="dates" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0" multiValued="true"/>
    <fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>
    <fieldType name="tdates" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0" multiValued="true"/>
    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <fieldType name="binary" class="solr.BinaryField"/>
    <!-- The "RandomSortField" is not used to store or search any data. You can declare fields of this type it in your schema to generate pseudo-random orderings of your docs for sorting or function purposes. The ordering is generated based on the field name and the version of the index. As long as the index version remains unchanged, and the same field name is reused, the ordering of the docs will be consistent. If you want different psuedo-random orderings of documents, for the same version of the index, use a dynamicField and change the field name in the request. -->
    <fieldType name="random" class="solr.RandomSortField" indexed="true"/>
    <!-- solr.TextField allows the specification of custom text analyzers specified as a tokenizer and a list of token filters. Different analyzers may be specified for indexing and querying. The optional positionIncrementGap puts space between multiple fields of this type on the same document, with the purpose of preventing false phrase matching across fields. For more info on customizing your analyzer chain, please see http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters -->
    <!-- One can also specify an existing Analyzer class that has a default constructor via the class attribute on the analyzer element. Example: <fieldType name="text_greek" class="solr.TextField"> <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/> </fieldType> -->
    <!-- A text field that only splits on whitespace for exact matching of words -->
    <fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        </analyzer>
    </fieldType>
    <fieldType name="mots" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
        </analyzer>
    </fieldType>
    <fieldType name="suggest" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.NGramFilterFactory" minGramSize="1" maxGramSize="40"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- A general text field that has reasonable, generic cross-language defaults: it tokenizes with StandardTokenizer, removes stop words from case-insensitive "stopwords.txt" (empty by default), and down cases. At query time only, it also applies synonyms. -->
    <fieldType name="text_general" class="solr.TextField" positionIncrementGap="100" multiValued="true">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <!-- in this example, we will only use synonyms at query time <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- A text field with defaults appropriate for English: it tokenizes with StandardTokenizer, removes English stop words (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and finally applies Porter's stemming. The query time analyzer also applies synonyms from synonyms.txt. -->
    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
            <!-- Case insensitive stop word removal. -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.EnglishPossessiveFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory: <filter class="solr.EnglishMinimalStemFilterFactory"/> -->
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- A text field with defaults appropriate for English, plus aggressive word-splitting and autophrase features enabled. This field is just like text_en, except it adds WordDelimiterFilter to enable splitting and matching of words on case-change, alpha numeric boundaries, and non-alphanumeric chars. This means certain compound word cases will work, for example query "wi fi" will match document "WiFi" or "wi-fi". -->
    <fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
        <analyzer type="index">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <!-- in this example, we will only use synonyms at query time <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/> -->
            <!-- Case insensitive stop word removal. -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1" catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.PorterStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Less flexible matching, but less false matches. Probably not ideal for product names, but may be good for SKUs. Can insert dashes in the wrong place and still match. -->
    <fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
        <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
            <filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0" catenateWords="1" catenateNumbers="1" catenateAll="0"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
            <filter class="solr.EnglishMinimalStemFilterFactory"/>
            <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes possible with WordDelimiterFilter in conjuncton with stemming. -->
            <filter class="solr.RemoveDuplicatesTokenFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Just like text_general except it reverses the characters of each token, to enable more efficient leading wildcard queries. -->
    <fieldType name="text_general_rev" class="solr.TextField" positionIncrementGap="100">
        <analyzer type="index">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true" maxPosAsterisk="3" maxPosQuestion="2" maxFractionAsterisk="0.33"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>
    <fieldType name="phonetic_en" stored="false" indexed="true" class="solr.TextField">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.DoubleMetaphoneFilterFactory" inject="false"/>
        </analyzer>
    </fieldType>
    <!-- lowercases the entire field value, keeping it as a single token. -->
    <fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Example of using PathHierarchyTokenizerFactory at index time, so queries for paths match documents at that path, or in descendent paths -->
    <fieldType name="descendent_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
        </analyzer>
    </fieldType>
    <!-- Example of using PathHierarchyTokenizerFactory at query time, so queries for paths match documents at that path, or in ancestor paths -->
    <fieldType name="ancestor_path" class="solr.TextField">
        <analyzer type="index">
            <tokenizer class="solr.KeywordTokenizerFactory"/>
        </analyzer>
        <analyzer type="query">
            <tokenizer class="solr.PathHierarchyTokenizerFactory" delimiter="/"/>
        </analyzer>
    </fieldType>
    <!-- since fields of this type are by default not stored or indexed, any data added to them will be ignored outright. -->
    <fieldType name="ignored" stored="false" indexed="false" docValues="false" multiValued="true" class="solr.StrField"/>
    <!-- This point type indexes the coordinates as separate fields (subFields) If subFieldType is defined, it references a type, and a dynamic field definition is created matching *___<typename>. Alternately, if subFieldSuffix is defined, that is used to create the subFields. Example: if subFieldType="double", then the coordinates would be indexed in fields myloc_0___double,myloc_1___double. Example: if subFieldSuffix="_d" then the coordinates would be indexed in fields myloc_0_d,myloc_1_d The subFields are an implementation detail of the fieldType, and end users normally should not need to know about them. -->
    <fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>
    <!-- A specialized field for geospatial search filters and distance sorting. -->
    <fieldType name="location" class="solr.LatLonPointSpatialField"/>
    <!-- An alternative geospatial field type new to Solr 4. It supports multiValued and polygon shapes. For more information about this and other Spatial fields new to Solr 4, see: http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4 -->
    <fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType" geo="true" distErrPct="0.025" maxDistErr="0.001" distanceUnits="kilometers"/>
    <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType Parameters: defaultCurrency: Specifies the default currency if none specified. Defaults to "USD" precisionStep: Specifies the precisionStep for the TrieLong field used for the amount providerClass: Lets you plug in other exchange provider backend: solr.FileExchangeRateProvider is the default and takes one parameter: currencyConfig: name of an xml file holding exchange rates solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org: ratesFileLocation: URL or path to rates JSON file (default latest.json on the web) refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60) -->
    <fieldType name="currency" class="solr.CurrencyField" precisionStep="8" defaultCurrency="USD" currencyConfig="currency.xml"/>
    <!-- some examples for different languages (generally ordered by ISO code) -->
    <!-- Arabic -->
    <fieldType name="text_ar" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- for any non-arabic -->
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ar.txt"/>
            <!-- normalizes ﻯ to ﻱ, etc -->
            <filter class="solr.ArabicNormalizationFilterFactory"/>
            <filter class="solr.ArabicStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Bulgarian -->
    <fieldType name="text_bg" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_bg.txt"/>
            <filter class="solr.BulgarianStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Catalan -->
    <fieldType name="text_ca" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- removes l', etc -->
            <filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_ca.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ca.txt"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Catalan"/>
        </analyzer>
    </fieldType>
    <!-- CJK bigram (see text_ja for a Japanese configuration using morphological analysis) -->
    <fieldType name="text_cjk" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- normalize width before bigram, as e.g. half-width dakuten combine -->
            <filter class="solr.CJKWidthFilterFactory"/>
            <!-- for any non-CJK -->
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.CJKBigramFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Czech -->
    <fieldType name="text_cz" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_cz.txt"/>
            <filter class="solr.CzechStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Danish -->
    <fieldType name="text_da" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_da.txt" format="snowball"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Danish"/>
        </analyzer>
    </fieldType>
    <!-- German -->
    <fieldType name="text_de" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_de.txt" format="snowball"/>
            <filter class="solr.GermanNormalizationFilterFactory"/>
            <filter class="solr.GermanLightStemFilterFactory"/>
            <!-- less aggressive: <filter class="solr.GermanMinimalStemFilterFactory"/> -->
            <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="German2"/> -->
        </analyzer>
    </fieldType>
    <!-- Greek -->
    <fieldType name="text_el" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- greek specific lowercase for sigma -->
            <filter class="solr.GreekLowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="false" words="lang/stopwords_el.txt"/>
            <filter class="solr.GreekStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Spanish -->
    <fieldType name="text_es" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_es.txt" format="snowball"/>
            <filter class="solr.SpanishLightStemFilterFactory"/>
            <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Spanish"/> -->
        </analyzer>
    </fieldType>
    <!-- Basque -->
    <fieldType name="text_eu" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_eu.txt"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Basque"/>
        </analyzer>
    </fieldType>
    <!-- Persian -->
    <fieldType name="text_fa" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <!-- for ZWNJ -->
            <charFilter class="solr.PersianCharFilterFactory"/>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.ArabicNormalizationFilterFactory"/>
            <filter class="solr.PersianNormalizationFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_fa.txt"/>
        </analyzer>
    </fieldType>
    <!-- Finnish -->
    <fieldType name="text_fi" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_fi.txt" format="snowball"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Finnish"/>
            <!-- less aggressive: <filter class="solr.FinnishLightStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- French -->
    <fieldType name="text_fr" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- removes l', etc -->
            <filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_fr.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_fr.txt" format="snowball"/>
            <filter class="solr.FrenchLightStemFilterFactory"/>
            <!-- less aggressive: <filter class="solr.FrenchMinimalStemFilterFactory"/> -->
            <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="French"/> -->
        </analyzer>
    </fieldType>
    <!-- Irish -->
    <fieldType name="text_ga" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- removes d', etc -->
            <filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_ga.txt"/>
            <!-- removes n-, etc. position increments is intentionally false! -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/hyphenations_ga.txt"/>
            <filter class="solr.IrishLowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ga.txt"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Irish"/>
        </analyzer>
    </fieldType>
    <!-- Galician -->
    <fieldType name="text_gl" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_gl.txt"/>
            <filter class="solr.GalicianStemFilterFactory"/>
            <!-- less aggressive: <filter class="solr.GalicianMinimalStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- Hindi -->
    <fieldType name="text_hi" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <!-- normalizes unicode representation -->
            <filter class="solr.IndicNormalizationFilterFactory"/>
            <!-- normalizes variation in spelling -->
            <filter class="solr.HindiNormalizationFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_hi.txt"/>
            <filter class="solr.HindiStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Hungarian -->
    <fieldType name="text_hu" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_hu.txt" format="snowball"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Hungarian"/>
            <!-- less aggressive: <filter class="solr.HungarianLightStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- Armenian -->
    <fieldType name="text_hy" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_hy.txt"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Armenian"/>
        </analyzer>
    </fieldType>
    <!-- Indonesian -->
    <fieldType name="text_id" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_id.txt"/>
            <!-- for a less aggressive approach (only inflectional suffixes), set stemDerivational to false -->
            <filter class="solr.IndonesianStemFilterFactory" stemDerivational="true"/>
        </analyzer>
    </fieldType>
    <!-- Italian -->
    <fieldType name="text_it" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <!-- removes l', etc -->
            <filter class="solr.ElisionFilterFactory" ignoreCase="true" articles="lang/contractions_it.txt"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_it.txt" format="snowball"/>
            <filter class="solr.ItalianLightStemFilterFactory"/>
            <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Italian"/> -->
        </analyzer>
    </fieldType>
    <!-- Japanese using morphological analysis (see text_cjk for a configuration using bigramming) NOTE: If you want to optimize search for precision, use default operator AND in your query parser config with <solrQueryParser defaultOperator="AND"/> further down in this file. Use OR if you would like to optimize for recall (default). -->
    <fieldType name="text_ja" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="false">
        <analyzer>
            <!-- Kuromoji Japanese morphological analyzer/tokenizer (JapaneseTokenizer) Kuromoji has a search mode (default) that does segmentation useful for search. A heuristic is used to segment compounds into its parts and the compound itself is kept as synonym. Valid values for attribute mode are: normal: regular segmentation search: segmentation useful for search with synonyms compounds (default) extended: same as search mode, but unigrams unknown words (experimental) For some applications it might be good to use search mode for indexing and normal mode for queries to reduce recall and prevent parts of compounds from being matched and highlighted. Use <analyzer type="index"> and <analyzer type="query"> for this and mode normal in query. Kuromoji also has a convenient user dictionary feature that allows overriding the statistical model with your own entries for segmentation, part-of-speech tags and readings without a need to specify weights. Notice that user dictionaries have not been subject to extensive testing. User dictionary attributes are: userDictionary: user dictionary filename userDictionaryEncoding: user dictionary encoding (default is UTF-8) See lang/userdict_ja.txt for a sample user dictionary file. Punctuation characters are discarded by default. Use discardPunctuation="false" to keep them. See http://wiki.apache.org/solr/JapaneseLanguageSupport for more on Japanese language support. -->
            <tokenizer class="solr.JapaneseTokenizerFactory" mode="search"/>
            <!--<tokenizer class="solr.JapaneseTokenizerFactory" mode="search" userDictionary="lang/userdict_ja.txt"/>-->
            <!-- Reduces inflected verbs and adjectives to their base/dictionary forms (辞書形) -->
            <filter class="solr.JapaneseBaseFormFilterFactory"/>
            <!-- Removes tokens with certain part-of-speech tags -->
            <filter class="solr.JapanesePartOfSpeechStopFilterFactory" tags="lang/stoptags_ja.txt"/>
            <!-- Normalizes full-width romaji to half-width and half-width kana to full-width (Unicode NFKC subset) -->
            <filter class="solr.CJKWidthFilterFactory"/>
            <!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ja.txt"/>
            <!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->
            <filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>
            <!-- Lower-cases romaji characters -->
            <filter class="solr.LowerCaseFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Latvian -->
    <fieldType name="text_lv" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_lv.txt"/>
            <filter class="solr.LatvianStemFilterFactory"/>
        </analyzer>
    </fieldType>
    <!-- Dutch -->
    <fieldType name="text_nl" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_nl.txt" format="snowball"/>
            <filter class="solr.StemmerOverrideFilterFactory" dictionary="lang/stemdict_nl.txt" ignoreCase="false"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Dutch"/>
        </analyzer>
    </fieldType>
    <!-- Norwegian -->
    <fieldType name="text_no" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_no.txt" format="snowball"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Norwegian"/>
            <!-- less aggressive: <filter class="solr.NorwegianLightStemFilterFactory"/> -->
            <!-- singular/plural: <filter class="solr.NorwegianMinimalStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- Portuguese -->
    <fieldType name="text_pt" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_pt.txt" format="snowball"/>
            <filter class="solr.PortugueseLightStemFilterFactory"/>
            <!-- less aggressive: <filter class="solr.PortugueseMinimalStemFilterFactory"/> -->
            <!-- more aggressive: <filter class="solr.SnowballPorterFilterFactory" language="Portuguese"/> -->
            <!-- most aggressive: <filter class="solr.PortugueseStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- Romanian -->
    <fieldType name="text_ro" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ro.txt"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Romanian"/>
        </analyzer>
    </fieldType>
    <!-- Russian -->
    <fieldType name="text_ru" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ru.txt" format="snowball"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Russian"/>
            <!-- less aggressive: <filter class="solr.RussianLightStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- Swedish -->
    <fieldType name="text_sv" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_sv.txt" format="snowball"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Swedish"/>
            <!-- less aggressive: <filter class="solr.SwedishLightStemFilterFactory"/> -->
        </analyzer>
    </fieldType>
    <!-- Thai -->
    <fieldType name="text_th" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.ThaiTokenizerFactory"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_th.txt"/>
        </analyzer>
    </fieldType>
    <!-- Turkish -->
    <fieldType name="text_tr" class="solr.TextField" positionIncrementGap="100">
        <analyzer>
            <tokenizer class="solr.StandardTokenizerFactory"/>
            <filter class="solr.TurkishLowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory" ignoreCase="false" words="lang/stopwords_tr.txt"/>
            <filter class="solr.SnowballPorterFilterFactory" language="Turkish"/>
        </analyzer>
    </fieldType>
    <!-- Similarity is the scoring routine for each document vs. a query. A custom Similarity or SimilarityFactory may be specified here, but the default is fine for most applications. For more info: http://wiki.apache.org/solr/SchemaXml#Similarity -->
    <!-- <similarity class="com.example.solr.CustomSimilarityFactory"> <str name="paramkey">param value</str> </similarity> -->
    <field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false"/>
    <field name="_version_" type="long" indexed="true" stored="true"/>
    <field name="_root_" type="string" indexed="true" stored="false" docValues="false"/>
    <field name="content_type" type="string" indexed="true" stored="true"/>
    <field name="doc_type" type="string" indexed="true" stored="true"/>
    <field name="title" type="string" indexed="true" stored="true"/>
    <field name="language" type="string" indexed="true" stored="true"/>

    <dynamicField name="*_suggested" type="suggest" indexed="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_encrypted" type="string" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_encrypteds" type="string" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_int" type="int" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_ints" type="ints" indexed="true" stored="false" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_string" type="string" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_strings" type="strings" indexed="true" stored="false" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_long" type="long" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_longs" type="longs" indexed="true" stored="false" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_boolean" type="boolean" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_booleans" type="booleans" indexed="true" stored="false" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_float" type="float" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_floats" type="floats" indexed="true" stored="false" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_double" type="double" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_doubles" type="doubles" indexed="true" stored="false" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_date" type="date" indexed="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_dates" type="date" indexed="true" multiValued="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_indexed_location" type="location" stored="false" indexed="true" sortMissingLast="true"/>
    <dynamicField name="*_indexed_phonetic_en" type="phonetic_en" indexed="true" multiValued="true" stored="false" sortMissingLast="true"/>
    <dynamicField name="*_text_enUS" type="text_en_splitting" indexed="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_text_esES" type="text_es" indexed="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_text_frFR" type="text_fr" indexed="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_int" type="int" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_ints" type="ints" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_string" type="string" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_strings" type="strings" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_long" type="long" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_longs" type="longs" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_boolean" type="boolean" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_booleans" type="booleans" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_float" type="float" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_floats" type="floats" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_double" type="double" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_doubles" type="doubles" indexed="false" stored="true" multiValued="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_date" type="date" indexed="false" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_dates" type="date" indexed="false" multiValued="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_stored_location" type="location" stored="true" indexed="false" sortMissingLast="true"/>
    <dynamicField name="*_stored_phonetic_en" type="phonetic_en" indexed="false" multiValued="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_incremented_int" type="int" indexed="true" stored="true" sortMissingLast="true"/>
    <dynamicField name="*_incremented_long" type="long" indexed="true" stored="true" sortMissingLast="true"/>
    <uniqueKey>id</uniqueKey>
</schema>

